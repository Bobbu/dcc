AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DCC API - Random Quote Service with API Key Authentication

Parameters:
  CustomDomainName:
    Type: String
    Default: dcc.anystupididea.com
    Description: Custom domain name for the API
  
  CertificateArn:
    Type: String
    Default: ""
    Description: ACM Certificate ARN for the custom domain (leave empty to skip custom domain setup)
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key for tag generation (stored securely in Lambda environment)

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref CertificateArn, ""]]

Resources:
  # Lambda function with API Gateway integration
  QuoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-quote-handler
      CodeUri: lambda/
      Handler: quote_handler_optimized.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: dcc-quotes-optimized
          ENVIRONMENT: dev
      Policies:
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
      Events:
        QuoteApi:
          Type: Api
          Properties:
            Path: /quote
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        TagsApi:
          Type: Api
          Properties:
            Path: /tags
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        QuoteByIdApi:
          Type: Api
          Properties:
            Path: /quote/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  # Quote Page Handler for social sharing meta tags
  QuotePageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-quote-page-handler
      CodeUri: lambda/
      Handler: quote_page_handler.lambda_handler
      Runtime: python3.10
      Timeout: 10
      Environment:
        Variables:
          QUOTES_TABLE: !Ref QuotesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref QuotesTable
      Events:
        GetQuotePage:
          Type: Api
          Properties:
            Path: /share/quote/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # OPTIONS Handler for CORS
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-options-handler
      CodeUri: lambda/
      Handler: options_handler.lambda_handler
      Runtime: python3.10
      Timeout: 3
      Events:
        OptionsQuote:
          Type: Api
          Properties:
            Path: /quote
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsTags:
          Type: Api
          Properties:
            Path: /tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsQuoteById:
          Type: Api
          Properties:
            Path: /quote/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsShareQuote:
          Type: Api
          Properties:
            Path: /share/quote/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotes:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotesId:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminTags:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminTagsId:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminTagsUnused:
          Type: Api
          Properties:
            Path: /admin/tags/unused
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAuthRegister:
          Type: Api
          Properties:
            Path: /auth/register
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAuthConfirm:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminGenerateTags:
          Type: Api
          Properties:
            Path: /admin/generate-tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminSearch:
          Type: Api
          Properties:
            Path: /admin/search
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotesByAuthor:
          Type: Api
          Properties:
            Path: /admin/quotes/author/{author}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotesByTag:
          Type: Api
          Properties:
            Path: /admin/quotes/tag/{tag}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminExportS3:
          Type: Api
          Properties:
            Path: /admin/export-s3
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsFavorites:
          Type: Api
          Properties:
            Path: /favorites
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsFavoritesId:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsFavoritesCheck:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}/check
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Auth Lambda function for registration and confirmation
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-auth-handler
      CodeUri: lambda/
      Handler: auth_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Sid: CognitoAccess
              Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:ConfirmSignUp
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        Confirm:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Admin Lambda function for CRUD operations
  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-admin-handler
      CodeUri: lambda/
      Handler: admin_handler_optimized.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: dcc-quotes-optimized
          USER_POOL_ID: !Ref UserPool
          ENVIRONMENT: dev
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
      Events:
        CreateQuote:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateQuote:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        DeleteQuote:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        ListQuotes:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        GetTags:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        CleanupUnusedTags:
          Type: Api
          Properties:
            Path: /admin/tags/unused
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        AddTag:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateTag:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        DeleteTag:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        SearchQuotes:
          Type: Api
          Properties:
            Path: /admin/search
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        ExportData:
          Type: Api
          Properties:
            Path: /admin/export
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        QuotesByAuthor:
          Type: Api
          Properties:
            Path: /admin/quotes/author/{author}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        QuotesByTag:
          Type: Api
          Properties:
            Path: /admin/quotes/tag/{tag}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # OpenAI proxy function for secure tag generation
  OpenAIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-openai-handler
      CodeUri: lambda/
      Handler: candidate_tags_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Events:
        GenerateTags:
          Type: Api
          Properties:
            Path: /admin/generate-tags
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Candidate quotes function for fetching potential quotes from OpenAI
  CandidateQuotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-candidate-quotes-handler
      CodeUri: lambda/
      Handler: candidate_quotes_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Events:
        GetCandidateQuotes:
          Type: Api
          Properties:
            Path: /admin/candidate-quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Explicit API Gateway for better control
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: dcc-quote-api
      StageName: prod
      Auth:
        ApiKeyRequired: true
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            AuthType: COGNITO_USER_POOLS
            IdentitySource: method.request.header.Authorization
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        AllowOrigin: "'*'"
        AllowCredentials: false
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 1

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: dcc-api-key
      Description: API Key for DCC Quote Service
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: prod
    DependsOn: ApiGatewayApiprodStage

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: dcc-usage-plan
      Description: Usage plan for DCC Quote API
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: prod
      Throttle:
        BurstLimit: 5
        RateLimit: 1
      Quota:
        Limit: 1000
        Period: DAY
    DependsOn: ApiGatewayApiprodStage

  # Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Cognito User Pool for user authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dcc-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false  # Allow self-registration
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: dcc-app-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Admin Group
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref UserPool
      Description: Admin users for quote management
      Precedence: 1

  # Users Group
  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref UserPool
      Description: Regular authenticated users
      Precedence: 10

  # DynamoDB table for quotes
  QuotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-quotes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tag
          AttributeType: S
        - AttributeName: quote_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TagIndex
          KeySchema:
            - AttributeName: tag
              KeyType: HASH
            - AttributeName: quote_id
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      BillingMode: PAY_PER_REQUEST

  # Custom Domain Name
  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2

  # Base Path Mapping
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ApiGatewayApi
      Stage: prod
    DependsOn: ApiGatewayApiprodStage

  # S3 Bucket for database exports
  ExportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: quote-me-app-db-exports
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldExports
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600

  # Lambda function for handling S3 exports
  ExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-export-handler
      CodeUri: lambda/
      Handler: export_handler.lambda_handler
      Runtime: python3.10
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: dcc-quotes-optimized
          EXPORT_BUCKET: !Ref ExportsBucket
          USER_POOL_ID: !Ref UserPool
      Policies:
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
        - S3CrudPolicy:
            BucketName: !Ref ExportsBucket
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminGetUser
            Resource: !GetAtt UserPool.Arn
      Events:
        ExportApi:
          Type: Api
          Properties:
            Path: /admin/export-s3
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # DynamoDB table for user favorites
  FavoritesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-user-favorites
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: quote_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: quote_id
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: UserCreatedAtIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: Dev

  # DynamoDB table for proposed quotes
  ProposedQuotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-proposed-quotes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: proposer_email
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_date
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProposerEmailIndex
          KeySchema:
            - AttributeName: proposer_email
              KeyType: HASH
            - AttributeName: created_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: StatusDateIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      Tags:
        - Key: Environment
          Value: Dev

  # Lambda function for user favorites
  FavoritesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-favorites-handler
      CodeUri: lambda/
      Handler: favorites_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          FAVORITES_TABLE_NAME: !Ref FavoritesTable
          QUOTES_TABLE_NAME: dcc-quotes-optimized
          ENVIRONMENT: dev
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FavoritesTable
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
      Events:
        GetFavorites:
          Type: Api
          Properties:
            Path: /favorites
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        AddFavorite:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        RemoveFavorite:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        CheckFavorite:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}/check
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Lambda function for proposing quotes
  ProposeQuoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-propose-quote-handler
      CodeUri: lambda/
      Handler: propose_quote_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: dcc-proposed-quotes
          ENVIRONMENT: dev
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-proposed-quotes
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
      Events:
        ProposeQuoteApi:
          Type: Api
          Properties:
            Path: /propose-quote
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        ProposeQuoteOptionsApi:
          Type: Api
          Properties:
            Path: /propose-quote
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        GetProposedQuotesApi:
          Type: Api
          Properties:
            Path: /proposed-quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        GetProposedQuotesOptionsApi:
          Type: Api
          Properties:
            Path: /proposed-quotes
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        UpdateProposedQuoteApi:
          Type: Api
          Properties:
            Path: /proposed-quotes/{id}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateProposedQuoteOptionsApi:
          Type: Api
          Properties:
            Path: /proposed-quotes/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        DeleteProposedQuoteApi:
          Type: Api
          Properties:
            Path: /proposed-quotes/{id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Gateway Response for CORS on 4xx errors
  GatewayResponse4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

  # Gateway Response for CORS on 5xx errors
  GatewayResponse5xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

  # Specific Gateway Response for Unauthorized (401)
  GatewayResponseUnauthorized:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
  QuoteEndpoint:
    Description: "Quote endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/quote"

  CustomDomainUrl:
    Description: "Custom domain API URL (if configured)"
    Value: !If [HasCustomDomain, !Sub "https://${CustomDomainName}", "Not configured"]
    
  CustomDomainQuoteEndpoint:
    Description: "Custom domain quote endpoint URL (if configured)"
    Value: !If [HasCustomDomain, !Sub "https://${CustomDomainName}/quote", "Not configured"]

  CustomDomainTarget:
    Description: "CloudFront domain name for DNS CNAME record"
    Value: !If [HasCustomDomain, !GetAtt CustomDomain.DistributionDomainName, "Not configured"]

  ApiKeyValue:
    Description: "API Key for accessing the service"
    Value: !Ref ApiKey

  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
    Export:
      Name: DccUserPoolId
  
  ExportsBucketName:
    Description: "S3 Bucket for database exports"
    Value: !Ref ExportsBucket
    Export:
      Name: DccExportsBucket

  UserPoolClientId:
    Description: "Cognito User Pool Client ID" 
    Value: !Ref UserPoolClient
    Export:
      Name: DccUserPoolClientId

  QuotesTableName:
    Description: "DynamoDB Quotes Table Name"
    Value: !Ref QuotesTable
    Export:
      Name: DccQuotesTableName