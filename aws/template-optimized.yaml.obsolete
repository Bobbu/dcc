AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DCC API - Optimized Quote Service with Single Table Design

Parameters:
  CustomDomainName:
    Type: String
    Default: dcc-optimized.anystupididea.com
    Description: Custom domain name for the API
  
  CertificateArn:
    Type: String
    Default: ""
    Description: ACM Certificate ARN for the custom domain (leave empty to skip custom domain setup)
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key for tag generation (stored securely in Lambda environment)

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref CertificateArn, ""]]
  IsProduction: !Equals [!Ref Environment, "prod"]

Resources:
  # ========================================
  # OPTIMIZED DYNAMODB TABLE WITH SINGLE TABLE DESIGN
  # ========================================
  
  QuotesTableOptimized:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "dcc-quotes-optimized-${Environment}"
      BillingMode: PAY_PER_REQUEST
      
      # Enable streams for real-time processing
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      
      # Enable point-in-time recovery for production
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProduction, true, false]
      
      # Primary key structure
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: updated_at
          AttributeType: S
        - AttributeName: author_normalized
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
        - AttributeName: quote_normalized
          AttributeType: S

      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

      # Global Secondary Indexes for optimized queries
      GlobalSecondaryIndexes:
        # GSI1: Type and Date Index - For getting all items of a type sorted by date
        - IndexName: TypeDateIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: updated_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          
        # GSI2: Author Index - For getting all quotes by author
        - IndexName: AuthorDateIndex
          KeySchema:
            - AttributeName: author_normalized
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - quote
              - author
              - tags
              - id
              - PK
              - SK
              
        # GSI3: Tag Quote Index - For getting all quotes for a specific tag
        - IndexName: TagQuoteIndex
          KeySchema:
            - AttributeName: PK  # This will be TAG#tagname for tag-quote mappings
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - quote_id
              - author
              - type
              
        # GSI4: Search Index - For text-based search (optional, can also use OpenSearch)
        - IndexName: SearchIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: quote_normalized
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - quote
              - author
              - tags
              - PK
              - SK
              - created_at

      # Enable TTL for temporary data (session tokens, etc.)
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: QuoteManagement
        - Key: Version
          Value: "2.0"

  # ========================================
  # DYNAMODB STREAMS PROCESSOR
  # ========================================
  
  StreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-stream-processor-${Environment}"
      CodeUri: lambda/
      Handler: stream_processor.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref QuotesTableOptimized
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTableOptimized
      Events:
        DynamoDBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt QuotesTableOptimized.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 1

  # ========================================
  # OPTIMIZED LAMBDA FUNCTIONS
  # ========================================

  # Public Quote Handler (optimized for new table structure)
  QuoteFunctionOptimized:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-quote-handler-optimized-${Environment}"
      CodeUri: lambda/
      Handler: quote_handler_optimized.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref QuotesTableOptimized
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref QuotesTableOptimized
      Events:
        QuoteApi:
          Type: Api
          Properties:
            Path: /quote
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        TagsApi:
          Type: Api
          Properties:
            Path: /tags
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        QuoteByIdApi:
          Type: Api
          Properties:
            Path: /quote/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        # New endpoints for optimized queries
        QuotesByAuthorApi:
          Type: Api
          Properties:
            Path: /quotes/author/{author}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        QuotesByTagApi:
          Type: Api
          Properties:
            Path: /quotes/tag/{tag}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        SearchApi:
          Type: Api
          Properties:
            Path: /search
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  # Admin Handler (optimized for new table structure)
  AdminFunctionOptimized:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-admin-handler-optimized-${Environment}"
      CodeUri: lambda/
      Handler: admin_handler_optimized.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref QuotesTableOptimized
          USER_POOL_ID: !Ref UserPool
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTableOptimized
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:ListUsersInGroup
            Resource: !GetAtt UserPool.Arn
      Events:
        AdminQuotesGet:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminQuotesPost:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminQuotesPut:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminQuotesDelete:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        # New admin endpoints
        AdminTagsGet:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminTagsPost:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminTagsPut:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminTagsDelete:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminAuthorsGet:
          Type: Api
          Properties:
            Path: /admin/authors
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminExportGet:
          Type: Api
          Properties:
            Path: /admin/export
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
        AdminSearchGet:
          Type: Api
          Properties:
            Path: /admin/search
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  # ========================================
  # MIGRATION FUNCTION (One-time use)
  # ========================================
  
  MigrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-migration-${Environment}"
      CodeUri: lambda/
      Handler: migration.lambda_handler
      Runtime: python3.10
      Timeout: 900  # 15 minutes for large migrations
      MemorySize: 1024  # More memory for faster processing
      Environment:
        Variables:
          OLD_TABLE_NAME: dcc-quotes  # Original table name
          NEW_TABLE_NAME: !Ref QuotesTableOptimized
          ENVIRONMENT: !Ref Environment
      Policies:
        - DynamoDBReadPolicy:
            TableName: dcc-quotes
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTableOptimized
      # This function is manually invoked, no API events

  # ========================================
  # EXISTING RESOURCES (unchanged for compatibility)
  # ========================================

  # API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "dcc-api-${Environment}"
      StageName: prod
      Auth:
        ApiKeyRequired: true
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            AuthType: COGNITO_USER_POOLS
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  # API Key for rate limiting public endpoints
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub "dcc-api-key-${Environment}"
      Description: API key for DCC Quote Service
      Enabled: true
      Value: OPTIMIZED2Nepyi9N8hbe9730y3UGnDSwOlGPars7blN9  # Unique key for optimized API

  # Usage Plan for rate limiting
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub "dcc-usage-plan-${Environment}"
      Description: Usage plan for DCC Quote Service
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: prod
      Throttle:
        RateLimit: 1
        BurstLimit: 5
      Quota:
        Limit: 1000
        Period: DAY

  # Link API Key to Usage Plan
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "dcc-users-${Environment}"
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
        - Name: name
          AttributeDataType: String
          Required: false
          Mutable: true
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "dcc-client-${Environment}"
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # User Groups
  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref UserPool
      Description: Regular authenticated users
      Precedence: 10

  AdminsGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref UserPool
      Description: Administrative users
      Precedence: 5

  # OPTIONS Handler for CORS
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-options-handler-${Environment}"
      CodeUri: lambda/
      Handler: options_handler.lambda_handler
      Runtime: python3.10
      Timeout: 3
      Events:
        OptionsQuote:
          Type: Api
          Properties:
            Path: /quote
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsTags:
          Type: Api
          Properties:
            Path: /tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsQuoteById:
          Type: Api
          Properties:
            Path: /quote/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotes:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminExport:
          Type: Api
          Properties:
            Path: /admin/export
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminSearch:
          Type: Api
          Properties:
            Path: /admin/search
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        # Add OPTIONS for all new endpoints
        OptionsQuotesByAuthor:
          Type: Api
          Properties:
            Path: /quotes/author/{author}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsQuotesByTag:
          Type: Api
          Properties:
            Path: /quotes/tag/{tag}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsSearch:
          Type: Api
          Properties:
            Path: /search
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # OpenAI Proxy Function
  OpenAIProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-openai-proxy-${Environment}"
      CodeUri: lambda/
      Handler: openai_handler.lambda_handler
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
              - cognito-idp:ListUsersInGroup
            Resource: !GetAtt UserPool.Arn
      Events:
        GenerateTagsApi:
          Type: Api
          Properties:
            Path: /admin/generate-tags
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer

  # Authentication Handler
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "dcc-auth-handler-${Environment}"
      CodeUri: lambda/
      Handler: auth_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminSetUserPassword
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminConfirmSignUp
            Resource: !GetAtt UserPool.Arn
      Events:
        AuthRegister:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        AuthConfirm:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Custom Domain Name
  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomainName
      CertificateArn: !Ref CertificateArn

  CustomDomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ApiGatewayApi
      Stage: prod

  # ========================================
  # CLOUDWATCH ALARMS FOR MONITORING
  # ========================================
  
  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "DCC-HighLatency-${Environment}"
      AlarmDescription: Quote API latency is too high
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000  # 10 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref QuoteFunctionOptimized

  ErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "DCC-HighErrorRate-${Environment}"
      AlarmDescription: Quote API error rate is too high
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref QuoteFunctionOptimized

Outputs:
  # API Endpoints
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  CustomDomainUrl:
    Condition: HasCustomDomain
    Description: Custom domain URL
    Value: !Sub "https://${CustomDomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CustomDomainUrl"

  # DynamoDB Resources
  TableName:
    Description: DynamoDB table name
    Value: !Ref QuotesTableOptimized
    Export:
      Name: !Sub "${AWS::StackName}-TableName"

  TableStreamArn:
    Description: DynamoDB stream ARN
    Value: !GetAtt QuotesTableOptimized.StreamArn
    Export:
      Name: !Sub "${AWS::StackName}-StreamArn"

  # Cognito Resources
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  # API Key
  ApiKeyValue:
    Description: API Key for accessing public endpoints
    Value: !Ref ApiKey
    Export:
      Name: !Sub "${AWS::StackName}-ApiKey"