AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Complete DCC Quote Me API with Custom Domain - Scorched Earth Rebuild

Parameters:
  CustomDomainName:
    Type: String
    Default: dcc.anystupididea.com
    Description: Custom domain name for the API
  
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:862066558306:certificate/b33b1d60-cde0-4c8b-a38a-e9f3ab1b4b42
    Description: ACM Certificate ARN for the custom domain
  
  HostedZoneId:
    Type: String
    Default: Z6ED78QGBFL6M
    Description: Route53 Hosted Zone ID for anystupididea.com
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key for tag generation
  
  FCMServiceAccountJSON:
    Type: String
    NoEcho: true
    Description: FCM Service Account JSON for push notifications
    Default: ""

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    Environment:
      Variables:
        QUOTES_TABLE: !Ref QuotesTable
        TAGS_TABLE: !Ref TagsTable
        USER_POOL_ID: !Ref UserPool
        USER_POOL_CLIENT_ID: !Ref UserPoolClient
        OPENAI_API_KEY: !Ref OpenAIApiKey
        QUOTE_IMAGES_BUCKET: !Ref QuoteImagesBucket
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
    Domain:
      DomainName: !Ref CustomDomainName
      CertificateArn: !Ref CertificateArn
      Route53:
        HostedZoneId: !Ref HostedZoneId

Resources:
  # S3 Bucket for Images
  QuoteImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'dcc-quote-images-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  QuoteImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref QuoteImagesBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${QuoteImagesBucket.Arn}/*'

  # DynamoDB Tables
  QuotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'dcc-quotes-optimized-${AWS::StackName}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: author
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AuthorIndex
          KeySchema:
            - AttributeName: author
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  TagsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'dcc-tags-${AWS::StackName}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tag
          AttributeType: S
      KeySchema:
        - AttributeName: tag
          KeyType: HASH

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dcc-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: given_name
          Required: false
          Mutable: true
        - AttributeDataType: String
          Name: family_name
          Required: false
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: dcc-user-pool-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${CustomDomainName}/auth/callback'
        - 'http://localhost:3000/auth/callback'
      LogoutURLs:
        - !Sub 'https://${CustomDomainName}'
        - 'http://localhost:3000'
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # API Gateway
  DccApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: dcc-api
      StageName: prod
      Auth:
        ApiKeyRequired: true

  # Lambda Functions
  QuoteHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-quote-handler
      CodeUri: lambda/
      Handler: quote_handler.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref QuotesTable
        - DynamoDBReadPolicy:
            TableName: !Ref TagsTable
      Events:
        GetRandomQuote:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /quote
            Method: GET
            Auth:
              ApiKeyRequired: true
        GetQuoteById:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /quote/{id}
            Method: GET
            Auth:
              ApiKeyRequired: true

  TagsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-tags-handler
      CodeUri: lambda/
      Handler: tags_handler.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TagsTable
      Events:
        GetTags:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /tags
            Method: GET
            Auth:
              ApiKeyRequired: true

  AdminHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-admin-handler
      CodeUri: lambda/
      Handler: admin_handler.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TagsTable
      Events:
        AdminQuotes:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /admin/quotes
            Method: ANY
            Auth:
              ApiKeyRequired: false
        AdminQuotesById:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /admin/quotes/{id}
            Method: ANY
            Auth:
              ApiKeyRequired: false
        AdminTags:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /admin/tags
            Method: ANY
            Auth:
              ApiKeyRequired: false

  AuthHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-auth-handler
      CodeUri: lambda/
      Handler: auth_handler.lambda_handler
      Events:
        AuthRegister:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /auth/register
            Method: POST
            Auth:
              ApiKeyRequired: false
        AuthConfirm:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /auth/confirm
            Method: POST
            Auth:
              ApiKeyRequired: false

  OptionsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-options-handler
      CodeUri: lambda/
      Handler: options_handler.lambda_handler
      Events:
        OptionsRoot:
          Type: Api
          Properties:
            RestApiId: !Ref DccApi
            Path: /{proxy+}
            Method: OPTIONS
            Auth:
              ApiKeyRequired: false

Outputs:
  ApiUrl:
    Description: Custom Domain API URL
    Value: !Sub 'https://${CustomDomainName}'
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  
  QuotesTableName:
    Description: DynamoDB Quotes Table Name
    Value: !Ref QuotesTable
  
  TagsTableName:
    Description: DynamoDB Tags Table Name
    Value: !Ref TagsTable
  
  QuoteImagesBucketName:
    Description: S3 Bucket for quote images
    Value: !Ref QuoteImagesBucket