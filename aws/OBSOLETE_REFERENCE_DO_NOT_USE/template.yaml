AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DCC API - Random Quote Service with API Key Authentication

Parameters:
  CustomDomainName:
    Type: String
    Default: dcc.anystupididea.com
    Description: Custom domain name for the API
  
  CertificateArn:
    Type: String
    Default: ""
    Description: ACM Certificate ARN for the custom domain (leave empty to skip custom domain setup)
  
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API key for tag generation (stored securely in Lambda environment)
  
  GoogleClientId:
    Type: String
    Description: Google OAuth 2.0 Client ID for social login
  
  GoogleClientSecret:
    Type: String
    NoEcho: true
    Description: Google OAuth 2.0 Client Secret for social login
  
  AppleServicesId:
    Type: String
    Description: Apple Services ID for Sign in with Apple
    Default: com.anystupididea.quoteme.signin
  
  AppleTeamId:
    Type: String
    Description: Apple Developer Team ID
  
  AppleKeyId:
    Type: String
    Description: Apple Sign in with Apple Key ID
  
  ApplePrivateKey:
    Type: String
    NoEcho: true
    Description: Apple Sign in with Apple Private Key (p8 file content)
  
  FCMServiceAccountJSON:
    Type: String
    NoEcho: true
    Description: Firebase Cloud Messaging Service Account JSON for push notifications

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref CertificateArn, ""]]

Resources:
  # Lambda function with API Gateway integration
  QuoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-quote-handler
      CodeUri: lambda/
      Handler: quote_handler_optimized.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: dcc-quotes-optimized
          ENVIRONMENT: dev
      Policies:
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
      Events:
        QuoteApi:
          Type: Api
          Properties:
            Path: /quote
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        TagsApi:
          Type: Api
          Properties:
            Path: /tags
            Method: GET
            RestApiId: !Ref ApiGatewayApi
        QuoteByIdApi:
          Type: Api
          Properties:
            Path: /quote/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi

  # Quote Page Handler for social sharing meta tags
  QuotePageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-quote-page-handler
      CodeUri: lambda/
      Handler: quote_page_handler.lambda_handler
      Runtime: python3.10
      Timeout: 10
      Environment:
        Variables:
          QUOTES_TABLE: !Ref QuotesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref QuotesTable
      Events:
        GetQuotePage:
          Type: Api
          Properties:
            Path: /share/quote/{id}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # OPTIONS Handler for CORS
  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-options-handler
      CodeUri: lambda/
      Handler: options_handler.lambda_handler
      Runtime: python3.10
      Timeout: 3
      Events:
        OptionsQuote:
          Type: Api
          Properties:
            Path: /quote
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsTags:
          Type: Api
          Properties:
            Path: /tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsQuoteById:
          Type: Api
          Properties:
            Path: /quote/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsShareQuote:
          Type: Api
          Properties:
            Path: /share/quote/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotes:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminCheckDuplicate:
          Type: Api
          Properties:
            Path: /admin/check-duplicate
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotesId:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminTags:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminTagsId:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminTagsUnused:
          Type: Api
          Properties:
            Path: /admin/tags/unused
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAuthRegister:
          Type: Api
          Properties:
            Path: /auth/register
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAuthConfirm:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminGenerateTags:
          Type: Api
          Properties:
            Path: /admin/generate-tags
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminSearch:
          Type: Api
          Properties:
            Path: /admin/search
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotesByAuthor:
          Type: Api
          Properties:
            Path: /admin/quotes/author/{author}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminQuotesByTag:
          Type: Api
          Properties:
            Path: /admin/quotes/tag/{tag}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminExportS3:
          Type: Api
          Properties:
            Path: /admin/export-s3
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsFavorites:
          Type: Api
          Properties:
            Path: /favorites
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsFavoritesId:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsFavoritesCheck:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}/check
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminCandidateQuotes:
          Type: Api
          Properties:
            Path: /admin/candidate-quotes
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OptionsAdminCandidateQuotesByTopic:
          Type: Api
          Properties:
            Path: /admin/candidate-quotes-by-topic
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Auth Lambda function for registration and confirmation
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-auth-handler
      CodeUri: lambda/
      Handler: auth_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Sid: CognitoAccess
              Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:ConfirmSignUp
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
      Events:
        Register:
          Type: Api
          Properties:
            Path: /auth/register
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        Confirm:
          Type: Api
          Properties:
            Path: /auth/confirm
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Admin Lambda function for CRUD operations
  AdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-admin-handler
      CodeUri: lambda/
      Handler: admin_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          QUOTES_TABLE_NAME: dcc-quotes-optimized
          USER_POOL_ID: !Ref UserPool
          ENVIRONMENT: dev
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
      Events:
        CreateQuote:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        CheckDuplicate:
          Type: Api
          Properties:
            Path: /admin/check-duplicate
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateQuote:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        DeleteQuote:
          Type: Api
          Properties:
            Path: /admin/quotes/{id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        ListQuotes:
          Type: Api
          Properties:
            Path: /admin/quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        GetTags:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        CleanupUnusedTags:
          Type: Api
          Properties:
            Path: /admin/tags/unused
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        AddTag:
          Type: Api
          Properties:
            Path: /admin/tags
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateTag:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        DeleteTag:
          Type: Api
          Properties:
            Path: /admin/tags/{tag}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        SearchQuotes:
          Type: Api
          Properties:
            Path: /admin/search
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        ExportData:
          Type: Api
          Properties:
            Path: /admin/export
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        QuotesByAuthor:
          Type: Api
          Properties:
            Path: /admin/quotes/author/{author}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        QuotesByTag:
          Type: Api
          Properties:
            Path: /admin/quotes/tag/{tag}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # OpenAI proxy function for secure tag generation
  OpenAIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-openai-handler
      CodeUri: lambda/
      Handler: openai_based_tag_generator.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Events:
        GenerateTags:
          Type: Api
          Properties:
            Path: /admin/generate-tags
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Candidate quotes function for fetching potential quotes from OpenAI
  CandidateQuotesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-candidate-quotes-handler
      CodeUri: lambda/
      Handler: openai_based_quote_finder_by_author.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Events:
        GetCandidateQuotes:
          Type: Api
          Properties:
            Path: /admin/candidate-quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Candidate quotes by topic function for fetching potential quotes from OpenAI by topic
  CandidateQuotesByTopicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-candidate-quotes-by-topic-handler
      CodeUri: lambda/
      Handler: openai_based_quote_finder_by_topic.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
      Events:
        GetCandidateQuotesByTopic:
          Type: Api
          Properties:
            Path: /admin/candidate-quotes-by-topic
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # SQS Queue for image generation jobs
  ImageGenerationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: dcc-image-generation-queue
      VisibilityTimeout: 300  # 5 minutes
      MessageRetentionPeriod: 86400  # 1 day
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ImageGenerationDLQ.Arn
        maxReceiveCount: 3

  ImageGenerationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: dcc-image-generation-dlq
      MessageRetentionPeriod: 1209600  # 14 days

  # Queue handler - submits jobs and returns immediately
  ImageGenerationQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-image-generation-queue
      CodeUri: lambda/
      Handler: image_generation_queue_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          IMAGE_GENERATION_QUEUE_URL: !Ref ImageGenerationQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageGenerationQueue.QueueName
      Events:
        GenerateImage:
          Type: Api
          Properties:
            Path: /admin/generate-image
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        OptionsGenerateImage:
          Type: Api
          Properties:
            Path: /admin/generate-image
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Async processor - handles actual image generation
  ImageGenerationProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-image-generation-processor
      CodeUri: lambda/
      Handler: openai_based_image_generator.lambda_handler
      Runtime: python3.10
      Timeout: 300  # 5 minutes for image generation
      ReservedConcurrentExecutions: 2  # Limit concurrent executions to avoid rate limits
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIApiKey
          QUOTE_IMAGES_BUCKET: dcc-s3-images-quote-images
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
        - S3WritePolicy:
            BucketName: dcc-s3-images-quote-images
      Events:
        QueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageGenerationQueue.Arn
            BatchSize: 1  # Process one at a time

  # Status checker endpoint
  ImageGenerationStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-image-generation-status
      CodeUri: lambda/
      Handler: image_generation_status_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Policies:
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
      Events:
        CheckStatus:
          Type: Api
          Properties:
            Path: /admin/image-generation-status/{jobId}
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        OptionsCheckStatus:
          Type: Api
          Properties:
            Path: /admin/image-generation-status/{jobId}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Users Lambda function for listing Cognito users
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-users-handler
      CodeUri: lambda/
      Handler: users_handler.handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          SUBSCRIPTION_TABLE: dcc-daily-nuggets-subscriptions
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminListGroupsForUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminRemoveUserFromGroup
              - cognito-idp:AdminDeleteUser
            Resource: !GetAtt UserPool.Arn
        - DynamoDBCrudPolicy:
            TableName: dcc-daily-nuggets-subscriptions
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /admin/users
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UsersOptions:
          Type: Api
          Properties:
            Path: /admin/users
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        UpdateUserAdmin:
          Type: Api
          Properties:
            Path: /admin/users/{userId}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateUserAdminOptions:
          Type: Api
          Properties:
            Path: /admin/users/{userId}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        DeleteUser:
          Type: Api
          Properties:
            Path: /admin/users/{userId}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Explicit API Gateway for better control
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: dcc-quote-api
      StageName: prod
      Auth:
        ApiKeyRequired: true
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            AuthType: COGNITO_USER_POOLS
            IdentitySource: method.request.header.Authorization
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        AllowOrigin: "'*'"
        AllowCredentials: false
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 1

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: dcc-api-key
      Description: API Key for DCC Quote Service
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: prod
    DependsOn: ApiGatewayApiprodStage

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: dcc-usage-plan
      Description: Usage plan for DCC Quote API
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: prod
      Throttle:
        BurstLimit: 5
        RateLimit: 1
      Quota:
        Limit: 1000
        Period: DAY
    DependsOn: ApiGatewayApiprodStage

  # Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Lambda function for PreSignUp trigger (must be defined before UserPool)
  PreSignUpTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-presignup-trigger"
      CodeUri: lambda/
      Handler: presignup_trigger.lambda_handler
      Runtime: python3.10
      Timeout: 10

  # Lambda function for PostConfirmation trigger
  PostConfirmationTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-postconfirmation-trigger"
      CodeUri: lambda/
      Handler: postconfirmation_trigger.lambda_handler
      Runtime: python3.10
      Timeout: 10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"

  # Cognito User Pool for user authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: PreSignUpTriggerFunction
    Properties:
      UserPoolName: dcc-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false  # Allow self-registration
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpTriggerFunction.Arn
        PostConfirmation: !GetAtt PostConfirmationTriggerFunction.Arn

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: 
      - GoogleIdentityProvider
      # - AppleIdentityProvider  # MANUALLY CONFIGURED
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: dcc-app-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
        - Google
        - SignInWithApple
      CallbackURLs:
        - https://quote-me.anystupididea.com/
        - https://quote-me.anystupididea.com/auth/callback
        - http://localhost:3000/
        - quoteme://auth-success
      LogoutURLs:
        - https://quote-me.anystupididea.com/
        - http://localhost:3000/
        - quoteme://auth-signout
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Admin Group
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref UserPool
      Description: Admin users for quote management
      Precedence: 1

  # Users Group
  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref UserPool
      Description: Regular authenticated users
      Precedence: 10

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: dcc-identity-pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true
      SupportedLoginProviders:
        accounts.google.com: !Ref GoogleClientId

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  # IAM Role for authenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-AuthenticatedRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"

  # User Pool Domain for Hosted UI
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}-auth"
      UserPoolId: !Ref UserPool

  # Google Identity Provider
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: "email profile openid"
      AttributeMapping:
        email: email
        name: name
        picture: picture
        username: sub

  # Apple Identity Provider - MANUALLY CONFIGURED IN AWS CONSOLE
  # AppleIdentityProvider:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     UserPoolId: !Ref UserPool
  #     ProviderName: SignInWithApple
  #     ProviderType: SignInWithApple
  #     ProviderDetails:
  #       client_id: !Ref AppleServicesId
  #       team_id: !Ref AppleTeamId
  #       key_id: !Ref AppleKeyId
  #       private_key: !Ref ApplePrivateKey
  #       authorize_scopes: "email name"
  #     AttributeMapping:
  #       email: email
  #       name: name
  #       username: sub

  # Lambda permission for Cognito to invoke PreSignUp trigger
  PreSignUpTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PreSignUpTriggerFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # Lambda permission for Cognito to invoke PostConfirmation trigger
  PostConfirmationTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostConfirmationTriggerFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn


  # DynamoDB table for quotes
  QuotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-quotes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tag
          AttributeType: S
        - AttributeName: quote_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TagIndex
          KeySchema:
            - AttributeName: tag
              KeyType: HASH
            - AttributeName: quote_id
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      BillingMode: PAY_PER_REQUEST

  # Custom Domain Name
  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2

  # Base Path Mapping
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCustomDomain
    Properties:
      DomainName: !Ref CustomDomain
      RestApiId: !Ref ApiGatewayApi
      Stage: prod
    DependsOn: ApiGatewayApiprodStage

  # S3 Bucket for database exports
  ExportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: quote-me-app-db-exports
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldExports
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600

  # Lambda function for handling S3 exports
  ExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-export-handler
      CodeUri: lambda/
      Handler: export_handler.lambda_handler
      Runtime: python3.10
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          TABLE_NAME: dcc-quotes-optimized
          EXPORT_BUCKET: !Ref ExportsBucket
          USER_POOL_ID: !Ref UserPool
      Policies:
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
        - S3CrudPolicy:
            BucketName: !Ref ExportsBucket
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminGetUser
            Resource: !GetAtt UserPool.Arn
      Events:
        ExportApi:
          Type: Api
          Properties:
            Path: /admin/export-s3
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # DynamoDB table for user favorites
  FavoritesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-user-favorites
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: quote_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: quote_id
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: UserCreatedAtIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: Dev

  # DynamoDB table for proposed quotes
  ProposedQuotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-proposed-quotes
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: proposer_email
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_date
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ProposerEmailIndex
          KeySchema:
            - AttributeName: proposer_email
              KeyType: HASH
            - AttributeName: created_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: StatusDateIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      Tags:
        - Key: Environment
          Value: Dev

  # Lambda function for user favorites
  FavoritesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-favorites-handler
      CodeUri: lambda/
      Handler: favorites_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          FAVORITES_TABLE_NAME: !Ref FavoritesTable
          QUOTES_TABLE_NAME: dcc-quotes-optimized
          ENVIRONMENT: dev
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FavoritesTable
        - DynamoDBReadPolicy:
            TableName: dcc-quotes-optimized
      Events:
        GetFavorites:
          Type: Api
          Properties:
            Path: /favorites
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        AddFavorite:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        RemoveFavorite:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        CheckFavorite:
          Type: Api
          Properties:
            Path: /favorites/{quote_id}/check
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Lambda function for proposing quotes
  ProposeQuoteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-propose-quote-handler
      CodeUri: lambda/
      Handler: propose_quote_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: dcc-proposed-quotes
          ENVIRONMENT: dev
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-proposed-quotes
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
      Events:
        ProposeQuoteApi:
          Type: Api
          Properties:
            Path: /propose-quote
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        ProposeQuoteOptionsApi:
          Type: Api
          Properties:
            Path: /propose-quote
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        GetProposedQuotesApi:
          Type: Api
          Properties:
            Path: /proposed-quotes
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        GetProposedQuotesOptionsApi:
          Type: Api
          Properties:
            Path: /proposed-quotes
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        UpdateProposedQuoteApi:
          Type: Api
          Properties:
            Path: /proposed-quotes/{id}
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateProposedQuoteOptionsApi:
          Type: Api
          Properties:
            Path: /proposed-quotes/{id}
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        DeleteProposedQuoteApi:
          Type: Api
          Properties:
            Path: /proposed-quotes/{id}
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false

  # Daily Nuggets function for subscription management and email delivery
  DailyNuggetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-daily-nuggets-handler
      CodeUri: lambda/
      Handler: daily_nuggets_handler.handler
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          QUOTES_TABLE_NAME: dcc-quotes-optimized
          SUBSCRIPTIONS_TABLE_NAME: !Ref SubscriptionsTable
          USER_POOL_ID: !Ref UserPool
          SENDER_EMAIL: noreply@anystupididea.com
          CORS_ORIGIN: "*"
          FCM_SERVICE_ACCOUNT_JSON: !Ref FCMServiceAccountJSON
      Policies:
        - DynamoDBCrudPolicy:
            TableName: dcc-quotes-optimized
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - Statement:
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"
        - Statement:
            Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !GetAtt UserPool.Arn
      Events:
        GetSubscription:
          Type: Api
          Properties:
            Path: /subscriptions
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        UpdateSubscription:
          Type: Api
          Properties:
            Path: /subscriptions
            Method: PUT
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        DeleteSubscription:
          Type: Api
          Properties:
            Path: /subscriptions
            Method: DELETE
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        TestEmail:
          Type: Api
          Properties:
            Path: /subscriptions/test
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        TestNotification:
          Type: Api
          Properties:
            Path: /notifications/test
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        TestNotificationOptions:
          Type: Api
          Properties:
            Path: /notifications/test
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        AdminGetSubscriptions:
          Type: Api
          Properties:
            Path: /admin/subscriptions
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        AdminSubscriptionsOptions:
          Type: Api
          Properties:
            Path: /admin/subscriptions
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        SubscriptionOptions:
          Type: Api
          Properties:
            Path: /subscriptions
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        TestEmailOptions:
          Type: Api
          Properties:
            Path: /subscriptions/test
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # OAuth Callback Handler function
  OAuthCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-oauth-callback-handler
      CodeUri: lambda/
      Handler: oauth_callback_handler.lambda_handler
      Runtime: python3.10
      Timeout: 30
      Environment:
        Variables:
          ENVIRONMENT: dev
      Policies:
        - Version: 2012-10-17
          Statement:
            - Sid: LogsAccess
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTable
      Events:
        OAuthCallbackApi:
          Type: Api
          Properties:
            Path: /auth/callback
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OAuthCallbackOptions:
          Type: Api
          Properties:
            Path: /auth/callback
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OAuthTokensApi:
          Type: Api
          Properties:
            Path: /auth/tokens
            Method: GET
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false
        OAuthTokensOptions:
          Type: Api
          Properties:
            Path: /auth/tokens
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Push Notification Handler function
  PushNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-push-notification-handler
      CodeUri: lambda/
      Handler: push_notification_handler.lambda_handler
      Runtime: python3.10
      Timeout: 60
      Environment:
        Variables:
          FCM_SERVICE_ACCOUNT_JSON: !Ref FCMServiceAccountJSON
          QUOTES_TABLE_NAME: !Ref QuotesTable
          USER_PROFILES_TABLE_NAME: !Ref SubscriptionsTable
          ANALYTICS_TABLE_NAME: !Ref NotificationAnalyticsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationAnalyticsTable
      Events:
        SendIndividualNotification:
          Type: Api
          Properties:
            Path: /admin/notifications/send
            Method: POST
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuthorizer
              ApiKeyRequired: false
        SendIndividualNotificationOptions:
          Type: Api
          Properties:
            Path: /admin/notifications/send
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayApi
            Auth:
              ApiKeyRequired: false

  # Notification Batcher function for timezone-based Daily Nuggets
  NotificationBatcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dcc-notification-batcher
      CodeUri: lambda/
      Handler: notification_batcher.lambda_handler
      Runtime: python3.10
      Timeout: 300  # 5 minutes for batch processing
      Environment:
        Variables:
          QUOTES_TABLE_NAME: !Ref QuotesTable
          USER_PROFILES_TABLE_NAME: !Ref SubscriptionsTable
          PUSH_NOTIFICATION_FUNCTION_NAME: !Ref PushNotificationFunction
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref QuotesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt PushNotificationFunction.Arn
              - !GetAtt DailyNuggetsFunction.Arn
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"

  # DynamoDB table for notification analytics
  NotificationAnalyticsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-notification-analytics
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: eventType
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: UserEventIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: EventTypeIndex
          KeySchema:
            - AttributeName: eventType
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: Dev

  # DynamoDB table for subscription preferences
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dcc-subscriptions
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Environment
          Value: Dev

  # 24-Hour EventBridge Rules for Daily Nuggets
  # Users can choose any hour (00:00-23:00) for delivery in their timezone
  
  # Hour 00:00 UTC
  EventBridgeRuleHour00:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-00
      Description: "Daily Nuggets for 00:00 delivery preference"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour00"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":0}}'

  # Hour 01:00 UTC  
  EventBridgeRuleHour01:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-01
      ScheduleExpression: "cron(0 1 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour01"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":1}}'

  # Hour 02:00 UTC
  EventBridgeRuleHour02:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-02
      ScheduleExpression: "cron(0 2 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour02"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":2}}'

  # Hour 03:00 UTC
  EventBridgeRuleHour03:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-03
      ScheduleExpression: "cron(0 3 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour03"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":3}}'

  # Hour 04:00 UTC
  EventBridgeRuleHour04:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-04
      ScheduleExpression: "cron(0 4 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour04"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":4}}'

  # Hour 05:00 UTC
  EventBridgeRuleHour05:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-05
      ScheduleExpression: "cron(0 5 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour05"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":5}}'

  # Hour 06:00 UTC
  EventBridgeRuleHour06:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-06
      ScheduleExpression: "cron(0 6 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour06"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":6}}'

  # Hour 07:00 UTC
  EventBridgeRuleHour07:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-07
      ScheduleExpression: "cron(0 7 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour07"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":7}}'

  # Hour 08:00 UTC
  EventBridgeRuleHour08:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-08
      ScheduleExpression: "cron(0 8 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour08"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":8}}'

  # Hour 09:00 UTC
  EventBridgeRuleHour09:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-09
      ScheduleExpression: "cron(0 9 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour09"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":9}}'

  # Hour 10:00 UTC
  EventBridgeRuleHour10:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-10
      ScheduleExpression: "cron(0 10 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour10"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":10}}'

  # Hour 11:00 UTC
  EventBridgeRuleHour11:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-11
      ScheduleExpression: "cron(0 11 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour11"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":11}}'

  # Hour 12:00 UTC
  EventBridgeRuleHour12:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-12
      ScheduleExpression: "cron(0 12 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour12"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":12}}'

  # Hour 13:00 UTC
  EventBridgeRuleHour13:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-13
      ScheduleExpression: "cron(0 13 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour13"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":13}}'

  # Hour 14:00 UTC
  EventBridgeRuleHour14:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-14
      ScheduleExpression: "cron(0 14 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour14"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":14}}'

  # Hour 15:00 UTC
  EventBridgeRuleHour15:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-15
      ScheduleExpression: "cron(0 15 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour15"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":15}}'

  # Hour 16:00 UTC
  EventBridgeRuleHour16:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-16
      ScheduleExpression: "cron(0 16 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour16"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":16}}'

  # Hour 17:00 UTC
  EventBridgeRuleHour17:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-17
      ScheduleExpression: "cron(0 17 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour17"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":17}}'

  # Hour 18:00 UTC
  EventBridgeRuleHour18:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-18
      ScheduleExpression: "cron(0 18 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour18"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":18}}'

  # Hour 19:00 UTC
  EventBridgeRuleHour19:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-19
      ScheduleExpression: "cron(0 19 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour19"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":19}}'

  # Hour 20:00 UTC
  EventBridgeRuleHour20:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-20
      ScheduleExpression: "cron(0 20 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour20"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":20}}'

  # Hour 21:00 UTC
  EventBridgeRuleHour21:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-21
      ScheduleExpression: "cron(0 21 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour21"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":21}}'

  # Hour 22:00 UTC
  EventBridgeRuleHour22:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-22
      ScheduleExpression: "cron(0 22 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour22"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":22}}'

  # Hour 23:00 UTC
  EventBridgeRuleHour23:
    Type: AWS::Events::Rule
    Properties:
      Name: daily-nuggets-hour-23
      ScheduleExpression: "cron(0 23 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt NotificationBatcherFunction.Arn
          Id: "BatcherHour23"
          Input: '{"source":"aws.scheduler","detail":{"hour_utc":23}}'

  # Lambda Permissions for all 24 EventBridge Rules
  NotificationBatcherPermissionHour00:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour00.Arn

  NotificationBatcherPermissionHour01:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour01.Arn

  NotificationBatcherPermissionHour02:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour02.Arn

  NotificationBatcherPermissionHour03:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour03.Arn

  NotificationBatcherPermissionHour04:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour04.Arn

  NotificationBatcherPermissionHour05:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour05.Arn

  NotificationBatcherPermissionHour06:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour06.Arn

  NotificationBatcherPermissionHour07:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour07.Arn

  NotificationBatcherPermissionHour08:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour08.Arn

  NotificationBatcherPermissionHour09:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour09.Arn

  NotificationBatcherPermissionHour10:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour10.Arn

  NotificationBatcherPermissionHour11:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour11.Arn

  NotificationBatcherPermissionHour12:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour12.Arn

  NotificationBatcherPermissionHour13:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour13.Arn

  NotificationBatcherPermissionHour14:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour14.Arn

  NotificationBatcherPermissionHour15:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour15.Arn

  NotificationBatcherPermissionHour16:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour16.Arn

  NotificationBatcherPermissionHour17:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour17.Arn

  NotificationBatcherPermissionHour18:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour18.Arn

  NotificationBatcherPermissionHour19:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour19.Arn

  NotificationBatcherPermissionHour20:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour20.Arn

  NotificationBatcherPermissionHour21:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour21.Arn

  NotificationBatcherPermissionHour22:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour22.Arn

  NotificationBatcherPermissionHour23:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotificationBatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeRuleHour23.Arn

  # Gateway Response for CORS on 4xx errors
  GatewayResponse4xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

  # Gateway Response for CORS on 5xx errors
  GatewayResponse5xx:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

  # Specific Gateway Response for Unauthorized (401)
  GatewayResponseUnauthorized:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGatewayApi
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

  # S3 bucket is deployed separately via deploy-s3.sh
  # This avoids CloudFormation timeout issues

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
  QuoteEndpoint:
    Description: "Quote endpoint URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/quote"

  CustomDomainUrl:
    Description: "Custom domain API URL (if configured)"
    Value: !If [HasCustomDomain, !Sub "https://${CustomDomainName}", "Not configured"]
    
  CustomDomainQuoteEndpoint:
    Description: "Custom domain quote endpoint URL (if configured)"
    Value: !If [HasCustomDomain, !Sub "https://${CustomDomainName}/quote", "Not configured"]

  CustomDomainTarget:
    Description: "CloudFront domain name for DNS CNAME record"
    Value: !If [HasCustomDomain, !GetAtt CustomDomain.DistributionDomainName, "Not configured"]

  ApiKeyValue:
    Description: "API Key for accessing the service"
    Value: !Ref ApiKey

  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
    Export:
      Name: DccUserPoolId

  IdentityPoolId:
    Description: "Cognito Identity Pool ID"
    Value: !Ref IdentityPool
    Export:
      Name: DccIdentityPoolId
  
  ExportsBucketName:
    Description: "S3 Bucket for database exports"
    Value: !Ref ExportsBucket
    Export:
      Name: DccExportsBucket

  QuoteImagesBucketName:
    Description: "S3 Bucket for quote images"
    Value: "dcc-s3-images-quote-images"
    Export:
      Name: DccQuoteImagesBucket

  UserPoolClientId:
    Description: "Cognito User Pool Client ID" 
    Value: !Ref UserPoolClient
    Export:
      Name: DccUserPoolClientId

  UserPoolDomain:
    Description: "Cognito User Pool Domain for Hosted UI"
    Value: !Sub "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: DccUserPoolDomain

  CognitoHostedUIUrl:
    Description: "Cognito Hosted UI URL for Google OAuth"
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+profile&redirect_uri=https://quote-me.anystupididea.com/auth/callback"

  QuotesTableName:
    Description: "DynamoDB Quotes Table Name"
    Value: !Ref QuotesTable
    Export:
      Name: DccQuotesTableName