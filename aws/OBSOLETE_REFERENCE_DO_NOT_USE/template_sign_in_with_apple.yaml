AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Minimal Apple Sign In with AWS Cognito - Standalone Template

Parameters:
  # Apple Configuration Parameters
  AppleServicesId:
    Type: String
    Description: Apple Services ID for Sign in with Apple (e.g., com.yourcompany.yourapp.signin)
    Default: com.example.app.signin
  
  AppleTeamId:
    Type: String
    Description: Apple Developer Team ID (found in Apple Developer Account â†’ Membership)
  
  AppleKeyId:
    Type: String
    Description: Apple Sign in with Apple Key ID (created in Apple Developer Keys section)
  
  ApplePrivateKey:
    Type: String
    NoEcho: true
    Description: Apple Sign in with Apple Private Key content (.p8 file content with \n for line breaks)

  # App Configuration
  AppName:
    Type: String
    Description: Name of your application (used for resource naming)
    Default: MyApp
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters

  # Callback URLs
  CallbackUrls:
    Type: CommaDelimitedList
    Description: Comma-separated list of callback URLs for your app
    Default: "https://yourapp.com/auth/callback,yourapp://auth-success"
  
  LogoutUrls:
    Type: CommaDelimitedList  
    Description: Comma-separated list of logout URLs for your app
    Default: "https://yourapp.com/,yourapp://auth-signout"

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AppName}-user-pool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  # Apple Identity Provider
  AppleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: SignInWithApple
      ProviderType: SignInWithApple
      ProviderDetails:
        client_id: !Ref AppleServicesId
        team_id: !Ref AppleTeamId
        key_id: !Ref AppleKeyId
        private_key: !Ref ApplePrivateKey
        authorize_scopes: "email name"
      AttributeMapping:
        email: email
        name: firstName
        username: sub

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: AppleIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${AppName}-app-client"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
        - SignInWithApple
      CallbackURLs: !Ref CallbackUrls
      LogoutURLs: !Ref LogoutUrls
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AppName}-identity-pool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true

  # IAM Role for authenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AppName}-AuthenticatedRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  # User Pool Domain for Hosted UI
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AppName}-auth-${AWS::AccountId}"
      UserPoolId: !Ref UserPool

  # Default Users Group
  UsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Users
      UserPoolId: !Ref UserPool
      Description: Default group for authenticated users
      Precedence: 10

Outputs:
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AppName}-UserPoolId"

  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AppName}-UserPoolClientId"

  IdentityPoolId:
    Description: "Cognito Identity Pool ID"
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${AppName}-IdentityPoolId"

  UserPoolDomain:
    Description: "Cognito User Pool Domain for Hosted UI"
    Value: !Sub "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub "${AppName}-UserPoolDomain"

  CognitoHostedUIUrl:
    Description: "Cognito Hosted UI URL for Apple OAuth"
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+profile&redirect_uri=${CallbackUrls}"

  AuthenticatedRoleArn:
    Description: "IAM Role ARN for authenticated users"
    Value: !GetAtt AuthenticatedRole.Arn
    Export:
      Name: !Sub "${AppName}-AuthenticatedRoleArn"

  # Amplify Configuration (for easy copy-paste into amplify_outputs.json)
  AmplifyConfiguration:
    Description: "Configuration values for Amplify amplify_outputs.json"
    Value: !Sub |
      {
        "auth": {
          "aws_region": "${AWS::Region}",
          "user_pool_id": "${UserPool}",
          "user_pool_client_id": "${UserPoolClient}",
          "identity_pool_id": "${IdentityPool}",
          "oauth": {
            "identity_providers": ["APPLE"],
            "domain": "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com",
            "scopes": ["email", "openid", "profile"],
            "redirect_sign_in_uri": ["${CallbackUrls}"],
            "redirect_sign_out_uri": ["${LogoutUrls}"],
            "response_type": "code"
          }
        }
      }