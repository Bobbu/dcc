import 'package:flutter/material.dart';
import '../../models/quote.dart';

class ImportQuotesDialog extends StatefulWidget {
  final Function(List<Quote>) onImport;

  const ImportQuotesDialog({
    super.key,
    required this.onImport,
  });

  @override
  State<ImportQuotesDialog> createState() => _ImportQuotesDialogState();
}

class _ImportQuotesDialogState extends State<ImportQuotesDialog> {
  final TextEditingController _textController = TextEditingController();
  List<Quote> _parsedQuotes = [];
  String? _error;
  bool _showPreview = false;

  void _parseData() {
    setState(() {
      _error = null;
      _parsedQuotes = [];
      _showPreview = false;
    });

    final text = _textController.text.trim();
    if (text.isEmpty) {
      setState(() {
        _error = 'Please paste your data first';
      });
      return;
    }

    try {
      final lines = text.split('\n');
      if (lines.isEmpty) {
        setState(() {
          _error = 'No data found';
        });
        return;
      }

      // Skip header row if it contains "Nugget" and "Source"
      int startIndex = 0;
      if (lines[0].toLowerCase().contains('nugget') && lines[0].toLowerCase().contains('source')) {
        startIndex = 1;
      }

      List<Quote> quotes = [];
      for (int i = startIndex; i < lines.length; i++) {
        final line = lines[i].trim();
        if (line.isEmpty) continue;

        // Split by tab (TSV format from Google Sheets)
        final parts = line.split('\t');
        if (parts.length < 2) continue; // Need at least quote and author

        final quote = parts[0].trim();
        final author = parts[1].trim();
        
        if (quote.isEmpty || author.isEmpty) continue;

        // Collect tags from columns 2-6 (Tag1-Tag5)
        List<String> tags = [];
        for (int j = 2; j < parts.length && j < 7; j++) {
          final tag = parts[j].trim();
          if (tag.isNotEmpty) {
            tags.add(tag);
          }
        }

        quotes.add(Quote(
          id: '', // Will be generated by server
          quote: quote,
          author: author,
          tags: tags,
          createdAt: '',
          updatedAt: '',
        ));
      }

      setState(() {
        _parsedQuotes = quotes;
        _showPreview = quotes.isNotEmpty;
        if (quotes.isEmpty) {
          _error = 'No valid quotes found. Make sure your data has quote and author columns.';
        }
      });
    } catch (e) {
      setState(() {
        _error = 'Error parsing data: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Row(
        children: [
          Icon(Icons.file_upload, color: Theme.of(context).colorScheme.primary),
          const SizedBox(width: 8),
          const Text('Import Quotes'),
        ],
      ),
      content: SizedBox(
        width: double.maxFinite,
        height: 500,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Instructions:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 4),
            const Text(
              '1. Select rows in your Google Sheet (including headers)\n'
              '2. Copy them (Cmd+C or Ctrl+C)\n'
              '3. Paste below and click "Parse Data"',
              style: TextStyle(fontSize: 12),
            ),
            const SizedBox(height: 16),
            
            const Text(
              'Paste your Google Sheets data here:',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 8),
            
            Expanded(
              flex: _showPreview ? 1 : 2,
              child: TextField(
                controller: _textController,
                maxLines: null,
                expands: true,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: 'Nugget\tSource\tTag1\tTag2...\nQuote text\tAuthor\tTag1\tTag2...',
                  contentPadding: EdgeInsets.all(12),
                ),
              ),
            ),
            
            const SizedBox(height: 12),
            
            Row(
              children: [
                ElevatedButton(
                  onPressed: _parseData,
                  child: const Text('Parse Data'),
                ),
                if (_parsedQuotes.isNotEmpty) ...[
                  const SizedBox(width: 12),
                  Text(
                    '${_parsedQuotes.length} quotes found',
                    style: const TextStyle(
                      color: Colors.green,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ],
            ),
            
            if (_error != null) ...[
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.red.shade50,
                  border: Border.all(color: Colors.red.shade300),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Text(
                  _error!,
                  style: TextStyle(color: Colors.red.shade700, fontSize: 12),
                ),
              ),
            ],
            
            if (_showPreview) ...[
              const SizedBox(height: 12),
              const Text(
                'Preview (first 3 quotes):',
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              const SizedBox(height: 8),
              Expanded(
                flex: 1,
                child: Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    border: Border.all(color: Colors.grey.shade300),
                    borderRadius: BorderRadius.circular(4),
                  ),
                  child: ListView.builder(
                    itemCount: _parsedQuotes.take(3).length,
                    itemBuilder: (context, index) {
                      final quote = _parsedQuotes[index];
                      return Padding(
                        padding: const EdgeInsets.only(bottom: 8),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '"${quote.quote}"',
                              style: const TextStyle(fontStyle: FontStyle.italic),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                            Text(
                              'â€” ${quote.author}',
                              style: const TextStyle(fontWeight: FontWeight.w500),
                            ),
                            if (quote.tags.isNotEmpty)
                              Text(
                                'Tags: ${quote.tags.join(', ')}',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: Colors.grey.shade600,
                                ),
                              ),
                          ],
                        ),
                      );
                    },
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _parsedQuotes.isNotEmpty
              ? () {
                  Navigator.of(context).pop();
                  widget.onImport(_parsedQuotes);
                }
              : null,
          child: Text('Import ${_parsedQuotes.length} Quotes'),
        ),
      ],
    );
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }
}