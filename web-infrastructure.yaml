AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Flutter Web App Infrastructure - S3 + CloudFront + Route53 + ACM Certificate'

Parameters:
  DomainName:
    Type: String
    Default: quote-me.anystupididea.com
    Description: Full domain name for the web application (e.g., app.example.com)
  
  RootDomainName:
    Type: String
    Default: anystupididea.com
    Description: Root domain name (e.g., example.com) - must have existing Route53 hosted zone
  
  HostedZoneId:
    Type: String
    Default: ''
    Description: Route53 Hosted Zone ID (leave empty to auto-detect)

Resources:
  # SSL Certificate with automatic DNS validation
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId


  # S3 Bucket for hosting the web app
  WebAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${DomainName}-web-app'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600

  # Origin Access Control for CloudFront
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${DomainName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: SSLCertificate
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebAppBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
        CustomErrorResponses:
          # Handle SPA routing - redirect 403/404 to index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        PriceClass: PriceClass_100  # US, Canada, Europe
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Comment: !Sub 'CloudFront distribution for ${DomainName}'

  # S3 Bucket Policy for CloudFront access
  WebAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudFrontDistribution
    Properties:
      Bucket: !Ref WebAppBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebAppBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Route53 DNS Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront's hosted zone ID (constant)
        EvaluateTargetHealth: false

Outputs:
  WebAppBucketName:
    Description: Name of the S3 bucket for web app hosting
    Value: !Ref WebAppBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebAppBucket'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  WebAppURL:
    Description: URL for the web application
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebAppURL'

  SSLCertificateArn:
    Description: ARN of the SSL certificate
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub '${AWS::StackName}-SSLCertificate'

  DeploymentInstructions:
    Description: Next steps for deployment
    Value: !Sub |
      Stack deployed successfully! Your web app infrastructure is ready.
      
      To deploy your Flutter app:
      1. Build: flutter build web --release
      2. Upload: aws s3 sync build/web/ s3://${WebAppBucket}/ --delete
      3. Invalidate: aws cloudfront create-invalidation --distribution-id ${CloudFrontDistribution} --paths "/*"
      
      Your app will be available at: https://${DomainName}
      (DNS propagation may take 5-15 minutes)